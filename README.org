* ~mu~

** Recent Changes

*** 2022-03-30: Renovating README

- Added more descriptions for setup and reformatted into an ~org~ file.

*** 2022-03-29: Revamped login--unsure if it generalizes

- Also removed filling of comint output since it messes with some MUDs
** Introduction

Mu uses Comint Mode to create a connection to a MUD server. This has the added benefit of providing you with an entire communication infrastructure. Minibuffer history, moving between prompts, highlighting of SGR (escape sequences controlling colors on a tty) using Ansi Color, etc.

Use ~mu-open~ to open a new connection. This will create two buffers for you. One buffer is the mu connection buffer. All the output from the host appears here. You can also type your commands here, but this will get confusing rather quickly as output gets added while your type.

That's when the other buffer, the mu input buffer, comes into play. Whatever you type there will get sent to the mu connection buffer as well. If you do that, input and output will happen in two different buffers.

The only important buffer is the mu connection buffer. The mu input buffer is just for convenience. You can create more mu input buffers using 'mu-input-buffer', or you can kill all mu input buffers. It doesn't matter.

Before you can open new connections, you must customize 'mu-worlds'. As soon as you have done that, use 'mu-open' to play.

** Setup
In order to use ~mu~, you have to define ~mu-worlds~ with a list of vectors containing world information.

I'm very new to MUDs, so I'm not very familiar with the login patterns, but I've made an attempt to improve the ~mu-login~ function in order to make it possible for the user to specify the login method. Thus, there is a 6th element of the vector which determines the method of the auto-login process. Below is an example of a ~mu-worlds~ definition.

#+begin_src emacs-lisp
(setq mu-worlds '(["MUD World name" "address" port_number "nickname" "password" method]
                  ["EmpireMUD" "empiremud.net" 4000 "some_nickname" "some_password" nil]
                  ["ConQUEST" "play.conquestmud.ca" 5000 "some_nickname" "some_password" "load"]))
#+end_src

- MUD World name :: String, Custom MUD World Name
- address :: String, address for a MUD
- port_number :: Integer, port number for a MUD
- nickname :: String, nickname for login--can be ~nil~ if you don't want to log in automatically
- password :: String, nickname for login--can be ~nil~ if you don't want to log in automatically
- method :: String, keyword to send. If non-nil, ~mu~ will send a string containing the method, the nickname, and the password. E.g. "load some_nickname some_password" Otherwise, the nickname and password are sent sequentially one second apart.


** Colors
Use Ansi Color. Here's how to install it in your ~/.emacs:

#+begin_src emacs-lisp
(autoload 'mu-open "mu" "Play on MUSHes and MUDs" t)
(add-hook 'mu-connection-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

** Coding System
Switch to the output buffer and use 'M-x mu-dos' if your host is sending
you DOS line endings (ie. you have a ^M at the end of every line).
'set-process-coding-system' can be used to set output and input coding
systems. There is probably some smart way of adding this to
'mu-connection-mode-hook'.

#+begin_src emacs-lisp
(defun mu-dos ()
  "Set coding system of the current buffer's process to DOS."
  (interactive)
  (set-process-coding-system 
   (get-buffer-process (current-buffer))
           'iso-latin-1-dos
           'iso-latin-1-unix))
#+end_src

